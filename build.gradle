import org.jetbrains.gradle.ext.Gradle

plugins {
    id("java")
    id("java-library")
    id("org.jetbrains.gradle.plugin.idea-ext") version "1.1.7"
    id("com.gtnewhorizons.retrofuturagradle") version "1.+"
    id("com.matthewprenger.cursegradle") version "1.4.0"
}

// Add version to the jar name
version project.version

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        vendor.set(JvmVendorSpec.ADOPTIUM)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    withJavadocJar()
}

minecraft {
    mcVersion = '1.12.2'

    username = "Desoroxxx"

    injectedTags.put('ID', project.id)
    injectedTags.put('VERSION', project.version)
}

// Generate a my.project.Tags class with the version number as a field
tasks.injectTags.configure {
    outputClassName.set("io.redstudioragnarok.${project.id}.Tags")
}

// Replace id, and version in `mcmod.info`
processResources {
    inputs.property 'id', project.id
    inputs.property 'version', project.version
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        include 'mcmod.info'
        fcd.expand (
                'id': project.id,
                'version': project.version
        )
    }
}

// Create configuration to include embedded dependencies into the jar
configurations {
    implementation
    compile.extendsFrom(embed)
}

repositories {
    maven {
        name 'Curse Maven'
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    implementation 'net.jafama:jafama:2.+'
    embed 'net.jafama:jafama:2.+'

    implementation rfg.deobf("curse.maven:LLibrary-243298:2504999")
    implementation rfg.deobf("curse.maven:MowziesMobs-250498:3048685")

    implementation rfg.deobf("curse.maven:ElenaiDodge2-442962:3343308")
}

jar {
    // Add all embedded dependencies into the jar
    from(provider{ configurations.embed.collect {it.isDirectory() ? it : zipTree(it)} })

    manifest.attributes([
            'ModSide': 'BOTH',
    ])
}

idea {
    module { inheritOutputDirs = true }

    module {
        excludeDirs = [file(".github"), file(".gradle"), file(".idea"), file("build"), file("gradle"), file("run")]
    }

    project { settings {
        runConfigurations {
            "1. Client"(Gradle) {
                taskNames = ["runClient"]
            }
            "2. Server"(Gradle) {
                taskNames = ["runServer"]
            }
            "3. Obfuscated Client"(Gradle) {
                taskNames = ["runObfClient"]
            }
            "4. Obfuscated Server"(Gradle) {
                taskNames = ["runObfServer"]
            }
        }

        compiler.javac {
            afterEvaluate {
                javacAdditionalOptions = "-encoding utf8"
                moduleJavacAdditionalOptions = [(project.id + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')]
            }
        }
    }}
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}
